#!/usr/bin/env ruby

require 'rubygems'
require 'tmpdir'
require 'vagrant'
require 'erb'
require 'fileutils'
require 'net/ssh'
require 'net/ssh/shell'
require 'logger'
require "fcntl"

class VagrantGo
  class Error < StandardError; end
  class TimeoutError < StandardError; end
  class CommandFailedError < StandardError; end

  ROOT                   = File.expand_path("../..", __FILE__)
  VAGRANT_TEMPLATE_PATH  = File.join(ROOT, 'templates', "Vagrantfile.erb")
  MANIFEST_TEMPLATE_PATH = File.join(ROOT, 'templates', "manifest.pp.erb")
  PUPPET_PATH            = File.join(ROOT, "puppet")
  VM_REPO_PATH           = "/selenium-trunk"

  COMMAND_TIMEOUT        = 60*30
  VM_LOCK_TIMEOUT        = 60*15
  DESTROY_TIMEOUT        = 60*10
  SSH_CONNECTION_TIMEOUT = 20

  def initialize(args)
    parse_args args
    check_repo
  end

  def execute
    $stdout.sync = true
    $stderr.sync = true

    in_vm_dir {
      begin
        launch_vm
        run_build
      ensure
        destroy_vm  # ideally roll back to snapshot
      end
    }
  end

  def generate_files_in(dest_dir)
    unless File.directory? dest_dir
      raise ArgumentError, "#{dest_dir} is not a directory"
    end

    # vars used by templates
    puppet_path   = PUPPET_PATH
    repo_path     = @repo
    vm_repo_path  = VM_REPO_PATH
    manifest      = @modules.join '-'
    modules       = @modules
    
    destination = File.join(dest_dir, "#{manifest}.pp")
    log.info "creating manifest [#{destination}] for #{repo_path}"
    
    File.open(destination, "w") do |io|
      io << ERB.new(File.read(MANIFEST_TEMPLATE_PATH), nil, "%-<>").result(binding)
    end
    
    destination = File.join(dest_dir, "Vagrantfile")
    log.info "creating Vagrantfile [#{destination}] for #{repo_path}"

    File.open(destination, "w") do |io|
      io << ERB.new(File.read(VAGRANT_TEMPLATE_PATH), nil, "%-<>").result(binding)
    end
  end
  
  def say(*args)
    log.info args.first
  end

  private

  def parse_args(args)
    if args.empty?
      puts <<-HELP

      #{File.basename $PROGRAM_NAME} [options] [targets]

      Options:

        -Xmodules=<list>  - comma-separated list of  modules to use for the VM (default: firefox)
        -Xrepo=<name>     - path to selenium checkout (default: cwd)
        -Xvnc.port=<num>  - forward this local port to the VNC server in the VM
        -Xvideo           - enable video recording

      HELP
      exit 1
    end

    opts = {}

    xargs = args.select { |arg|
      case arg
      when /^-X(.+)=(.+)$/
        opts[$1] = $2
        true
      when /^-X(.+)$/
        opts[$1] = true
      else
        false
      end
    }

    log.info opts.inspect

    @targets      = args - xargs
    @modules      = opts.delete('modules').to_s.split(',')
    @vnc_port     = Integer(opts.delete('vnc.port')) if opts.member?('vnc.port')
    @record_video = opts.delete('video').to_s == "true"

    @repo = opts.delete('repo') { Dir.pwd } # assume we're running from a checkout
    if @repo == "none"
      @repo = nil
    else
      @repo = File.expand_path(@repo)
    end

    unless opts.empty?
      raise ArgumentError, "unknown options #{opts.inspect}"
    end
  end

  def check_repo
    return unless @repo

    unless File.exist?(File.join(@repo, "go"))
      raise Error, "not a selenium repo: #{@repo.inspect}, specify -Xrepo=none if you want to execute arbitrary commands"
    end
  end

  def launch_vm
    log.info "launching VM @ #{Dir.pwd}"
    with_lock_guard { vagrant.cli "up" }
  end

  def destroy_vm
    log.info "destroying VM @ #{Dir.pwd}"

    locked do
      vbox_manage "controlvm '#{vm_name}' poweroff" or raise Error, "could not poweroff #{vm_name}!"
      wait_until(DESTROY_TIMEOUT, 'destroy vm') { vbox_manage "showvminfo '#{vm_name}' | grep State | grep 'powered off'" }

      vbox_manage "unregistervm '#{vm_name}' --delete"
      wait_until(DESTROY_TIMEOUT, 'delete vm') { not vbox_manage("list vms | grep '#{vm_name}'") }
    end
  end

  def vbox_manage(cmd)
    cmd = "VBoxManage #{cmd} 2>&1"
    log.info "[vbox] #{cmd}"

    system(cmd)
  end

  def in_vm_dir(&blk)
    log.info "creating VM with modules #{@modules.inspect} for `#{target_string}` [#{@repo}]"

    vm_dir = Dir.mktmpdir
    generate_files_in vm_dir

    begin
      Dir.chdir(vm_dir, &blk)
    ensure
      FileUtils.rm_rf vm_dir
    end
  end

  def vagrant
    @vagrant ||= (
      env = Vagrant::Environment.new
      env.ui = Vagrant::UI::Shell.new(env, self)

      env
    )
  end

  def vm_name
    vagrant.primary_vm.vm.name
  end

  def run_build
    if @repo
      run_command "cd #{VM_REPO_PATH}"
      record {
        run_command "./go #{target_string}"
      }
    else
      run_command target_string
    end
  end

  def target_string
    @target_string ||= @targets.join(' ')
  end

  def shell
    @shell ||= new_shell
  end

  def new_shell
    Net::SSH.start('localhost', 'vagrant', :port    => ssh_port,
                                           :keys    => [vagrant.primary_vm.env.config.ssh.private_key_path],
                                           :timeout => SSH_CONNECTION_TIMEOUT # initial connection
    ).shell
  end

  def exec(command, out = $stdout, err = $stderr)
    start_time = Time.now
    status     = nil

    shell.execute(command) do |process|
      process.on_output       { |prc, data| out.print data }
      process.on_error_output { |prc, data| err.print data }
      process.on_finish       { |prc| status = prc.exit_status }
    end

    shell.session.loop(0.5) do
      if Time.now >= (start_time + COMMAND_TIMEOUT)
        raise TimeoutError, "command timed out after #{COMMAND_TIMEOUT} seconds: #{command}"
      end

      status.nil?
    end

    status
  end

  def record(&blk)
    return yield unless @record_video

    output_file = "/tmp/build-video.mp4"
    log_file = "/tmp/build-video-log.txt"

    log.info "starting video recording @ #{output_file.inspect}"
    run_command "ffmpeg -an -f x11grab -y -r 5 -s 1024x768 -i :1.0+0,0 -vcodec mpeg4 -sameq #{output_file} &"

    begin
      res = yield
    ensure
      video_dest = File.join VM_REPO_PATH, 'build', 'build-video.mp4'
      log_dest = File.join VM_REPO_PATH, 'build', 'build-video-log.txt'

      log.info "moving #{output_file} -> #{video_dest}"
      status = exec "mv #{output_file} #{video_dest}"
      log.warn "could not move video to build folder" unless status == 0

      log.info "moving #{log_file} -> #{log_dest}"
      status = exec "mv #{log_file} #{log_dest}"
      log.warn "could not move video log to build folder" unless status == 0
    end

    res
  end

  def ssh_port
    @ssh_port ||= find_free_port
  end

  def vnc_port
    @vnc_port ||= find_free_port
  end

  def find_free_port
    locked {
      server = TCPServer.new("127.0.0.1", 0)
      port   = server.addr[1]
      server.close

      port
    }
  end

  def in_separate_shell(&blk)
    old_shell = @shell
    @shell = new_shell

    begin
      yield
    ensure
      @shell.close!
      @shell = old_shell
    end
  end

  def with_lock_guard(&blk)
    wait_until(VM_LOCK_TIMEOUT, "vm lock") {
      begin
        yield
        true
      rescue Vagrant::Errors::EnvironmentLockedError
        log.info "waiting for vm lock"
        false
      end
    }
  end

  def wait_until(timeout, desc, &blk)
    max = Time.now + timeout

    until yield
      if Time.now >= max
        raise TimeoutError, "timed out after #{timeout} seconds, waiting for #{desc}"
      end

      sleep 1
    end
  end

  def locked(&blk)
    FileUtils.mkdir_p File.dirname(lock_path)
    start_time = Time.now

    File.open(lock_path, "w+") { |f|
      f.fcntl Fcntl::F_SETFD, Fcntl::FD_CLOEXEC

      while f.flock(File::LOCK_EX | File::LOCK_NB) === false
        log.info "waiting for #{lock_path.inspect}"

        if Time.now >= (start_time + VM_LOCK_TIMEOUT)
          raise Error, "timed out after #{VM_LOCK_TIMEOUT} seconds waiting for lock on #{lock_path.inspect}"
        end

        sleep 1
      end

      yield
    }
  end

  def lock_path
    @lock_path ||= File.join(ROOT, "tmp", "selenium-ci.lock")
  end

  def log
    @log ||= (
      logger = Logger.new(STDOUT)
      logger.formatter = Proc.new do |severity, datetime, progname, msg|
        "#{datetime} | #{severity} | #{msg}\n"
      end

      logger
    )
  end

  def run_command(cmd)
    status = 0

    log.info "executing command: #{cmd}"
    status = exec(cmd)
    log.info "exit status #{status}    : #{cmd}"

    if status != 0
      raise CommandFailedError, "command exited with status #{status}: #{cmd.inspect}"
    end
  end

end

if __FILE__ == $0
  VagrantGo.new(ARGV).execute
end
